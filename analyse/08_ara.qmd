---
title: "Auswertung ARA"
author: "Levi Fuchs"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Auswertung ARA

Für die Energiestatistik werden auch Angaben zu Abwasserreinigungsanlagen ausgewertet<br> Die Daten für die ARA liegen als Excel vor und können mit R eingelesen, umgeformt und ausgewertet werden.

## Inputdaten

```{r}
#| label: load-packages
#| include: false
rm(list = ls())

library(tidyverse) # a suite of packages for data wrangling, transformation, plotting, ...
library(openxlsx)
library(sf)

ara_input_ekz <- as.data.frame(read_xls("K:/BD-AWEL-Ef/Elektrizitätswirtschaft/Administration/Praktikum/Levi_Fuchs/Projekte/Energiestatistik_neu/R_Project/ARA/AWEL_2024_Frau_Baumann.xls", sheet = "Zusammenfassung_fuer_Kunden"))

ara_input_ewz <- read_xlsx("K:/BD-AWEL-Ef/Elektrizitätswirtschaft/Administration/Praktikum/Levi_Fuchs/Projekte/Energiestatistik_neu/R_Project/ARA/Gelieferte Energiemengen aus gereinigtem Abwasser EDL.xlsx")

ara_olddata <- read.csv("K:/BD-AWEL-Ef/Elektrizitätswirtschaft/Administration/Praktikum/Levi_Fuchs/Projekte/Energiestatistik_neu/R_Project/ARA/ara_final_anlage.csv", sep=";")

ara_potenzial_2022 <- read.csv("K:/BD-AWEL-Ef/Elektrizitätswirtschaft/Administration/Praktikum/Levi_Fuchs/Projekte/Energiestatistik_neu/R_Project/ARA/ara_potenzial_2022.csv", sep=";")

gemeinden <- readRDS("K:/BD-AWEL-Ef/Elektrizitätswirtschaft/Administration/Praktikum/Levi_Fuchs/Projekte/Energiestatistik_neu/R_Project/Gemeinden/gemeinden_zh.rds") %>%
  st_drop_geometry(.)

jahr_heute <- as.integer(format(Sys.Date(), "%Y"))
jahr_datensatz <- as.integer(str_extract("K:/BD-AWEL-Ef/Elektrizitätswirtschaft/Administration/Praktikum/Levi_Fuchs/Projekte/Energiestatistik_neu/R_Project/ARA/AWEL_2024_Frau_Baumann.xlsx", "\\d+"))
```

## Funktionen

```{r}

# Funktion für exakte, fuzzy & Teilstring-Suche
match_names <- function(ara_name, geo_names, threshold = 0.1) {
  # 1️⃣ Exakter Abgleich
  if (ara_name %in% geo_names) {
    return(ara_name)
  }
  
  # 2️⃣ Fuzzy Matching mit Jaro-Winkler
  distances <- stringdist::stringdist(ara_name, geo_names, method = "jw")
  best_match <- geo_names[which.min(distances)]
  best_score <- min(distances)
  
  if (best_score < threshold) {
    return(best_match)
  }
  
  # 3️⃣ Teilstring-Suche (z.B. "Effretikon" in "Illnau-Effretikon")
  contains_match <- geo_names[str_detect(geo_names, fixed(ara_name, ignore_case = TRUE))]
  if (length(contains_match) > 0) {
    return(contains_match[1])  # Erstes gefundene Match zurückgeben
  }
  
  return(NA)  # Falls nichts passt
}
```

## Datenverarbeitung

```{r}
#| label: mutate data
#| include: false

# EKZ Daten

ekz_prov <- ara_input_ekz %>%
  slice((which(grepl("mwh", ara_input_ekz, ignore.case = TRUE))[1]-1):n()) %>%
  set_names(as.character(unlist(.[1,])))

names(ekz_prov)[1] <- "anlage"

ekz_prov2 <- ekz_prov %>% 
  select(anlage, names(ekz_prov)[grepl("mwh", names(ekz_prov), ignore.case = TRUE)]) %>%
  slice(-1) %>%
  rename(ara_energie_mwh_anlage = names(.)[2]) %>%
  filter(!is.na(anlage) | !is.na(ara_energie_mwh_anlage)) %>%
  filter(!grepl("total", anlage, ignore.case = T)) %>%
  mutate(anlage = ifelse(grepl("^ARA", anlage), anlage, NA)) %>%
  # Zuerst die 'anlage'-Spalte mit dem zuletzt bekannten Wert nach unten füllen
  mutate(anlage = zoo::na.locf(anlage, na.rm = FALSE)) %>%
  # Dann die 'ara_energie_mwh_anlage'-Spalte mit dem zuletzt bekannten Wert nach oben füllen
  arrange(desc(row_number())) %>%
  mutate(ara_energie_mwh_anlage = round(as.numeric(zoo::na.locf(ara_energie_mwh_anlage, na.rm = FALSE)),0)) %>%
  arrange(row_number()) %>%  # Reihenfolge wiederherstellen
  # Nur die Zeilen mit einer Anlage behalten
  distinct(anlage, .keep_all = TRUE) %>%
  filter(!is.na(anlage))

ekz_prov3 <- ekz_prov2 %>%
  mutate(clean_name = str_squish(str_remove_all(str_remove(anlage, "^ARA "), "\\(.*\\)"))) %>%
  mutate(anlage = str_remove(anlage, "^ARA "))


# Fuzzy-Matching durchführen
ekz_final <- ekz_prov3 %>%
  mutate(matched_name = sapply(clean_name, function(x) match_names(x, gemeinden$name, threshold = 0.1))) %>% # Join mit dem BFS-Nummern-Datensatz
  left_join(gemeinden, by = c("matched_name" = "name")) %>%
  left_join(ara_olddata %>% select(anlage, bfsnr), by = "bfsnr") %>%
  distinct() %>%
  mutate(selected_value = case_when(grepl("\\(", anlage.x) ~ anlage.x, grepl("\\(", anlage.y) ~ anlage.y, TRUE ~ coalesce(anlage.x, anlage.y))) %>%
  mutate(jahr = jahr_datensatz, anlage = selected_value) %>%
  select(anlage, bfsnr, jahr, ara_energie_mwh_anlage)


# ewz Daten (Werdhölzli)

ewz_final <- ara_input_ewz %>%
  slice((which(apply(ara_input_ewz, 1, function(row) any(grepl("total", row, ignore.case = TRUE))))[1]):n()) %>%
  { .[1, 1] <- "dummy"; . } %>%
  set_names(as.character(unlist(.[1,]))) %>%
  select(contains("dummy") | contains("total")) %>%
  filter(grepl("total", dummy, ignore.case = TRUE)) %>% # df[[1]] ist die erste Spalte 
  mutate(jahr = as.integer(str_remove(colnames(.)[ncol(.)], " *total")), ara_energie_mwh_anlage = as.numeric(.[[ncol(.) - 1]]), anlage = "Zürich (Werdhölzli)", bfsnr = 261) %>%  # .[[ncol(.)]] greift auf die letzte Spalte zu
  select(anlage, bfsnr, jahr, ara_energie_mwh_anlage) %>% # Nur die gewünschten Spalten behalten
  rename()


ekz_ewz_final <- rbind(ekz_final, ewz_final) 
```

## Alter Datensatz aktualisieren

```{r}


# 1️⃣ Bestehende Werte aktualisieren (falls Jahr + Anlage vorhanden)
updated_data <- ara_olddata %>%
  rows_update(ekz_ewz_final, by = c("jahr", "anlage"), unmatched = "ignore")  

# 2️⃣ Fehlende Werte aus dem neuen Datensatz hinzufügen (falls sie noch nicht existieren)
new_entries <- anti_join(ekz_ewz_final, ara_olddata, by = c("jahr", "anlage"))

# 3️⃣ Fehlende Anlagen auf neues Jahr übertragen
missing_in_new <- anti_join(ara_olddata, ekz_ewz_final, by = "bfsnr") %>%
  arrange(desc(jahr)) %>%
  filter(jahr == max(jahr)) %>%
  group_by(anlage) %>%  
  mutate(jahr = max(ara_olddata$jahr, na.rm = TRUE) + 1) %>%  # Setzt das letzte verfügbare Jahr aus ara_olddata
  ungroup()

# 4️⃣ Alles zusammenfügen
ara_final_anlage <- updated_data %>%
  bind_rows(new_entries) %>%
  bind_rows(missing_in_new) %>%
  arrange(jahr, anlage)  # Optionale Sortierung für bessere Übersicht

write.csv(ara_final_anlage, file.path(file.path(dirname(dirname(rstudioapi::getActiveDocumentContext()$path)), "data", "output"), "ara_anlagen.csv"), row.names = FALSE)


ara_final <- ara_final_anlage %>%
  left_join(ara_potenzial_2022 %>% select(bfsnr, ara_energiepot_mwh_anlage), by = "bfsnr") %>%
  distinct() %>%
  group_by(bfsnr, jahr)  %>%
  mutate(ara_energiepot_mwh_anlage = ara_energiepot_mwh_anlage / n()) %>% 
  summarise(ara_energie_mwh_gem = sum(ara_energie_mwh_anlage, na.rm = TRUE), ara_energiepot_mwh_gem = sum(ara_energiepot_mwh_anlage, na.rm = TRUE), .groups = 'drop') %>%
  left_join(gemeinden, by = "bfsnr") %>%
  mutate(gemeinde = name) %>%
  mutate(ara_energiepot_ungenutzt_mwh_gem = ara_energiepot_mwh_gem - ara_energie_mwh_gem) %>%
  select(gemeinde, bfsnr, jahr, ara_energie_mwh_gem, ara_energiepot_mwh_gem, ara_energiepot_ungenutzt_mwh_gem) %>%
  arrange(jahr, bfsnr)

write.csv(ara_final, file.path(file.path(dirname(dirname(rstudioapi::getActiveDocumentContext()$path)), "data", "output"), "ara.csv"), row.names = FALSE)
```
