---
title: "Auswertung Wärmepumpen"
subtitle: "(Oberflächengewässer)"
author: "Levi Fuchs"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Auswertung Wärmepumpen (Oberflächengewässer)

Für die Energiestatistik werden auch Angaben zu den Wärmepumpen ausgewertet. <br>Ein Jahresstand der aktuellen Daten werden von Marco Calderoni bereinigt zur Verfügung gestellt. Die Standorte der Anlagen liegen als Geodaten bzw. als WFS-Geodienst vor und können daher direkt mit R eingelesen, umgeformt und ausgewertet werden.

```{r}
#| label: load-packages
#| include: false

library(sf) # simple features packages for handling vector GIS data
library(httr) # generic webservice package
library(tidyverse) # a suite of packages for data wrangling, transformation, plotting, ...
#library(ows4R) # interface for OGC webservices
library(readxl)
```

```{r}
#| label: def-wfs
#| echo: true

## Some variables
#File path
file_path <- "K:/BD-AWEL-Ef/Elektrizitätswirtschaft/Administration/Praktikum/Levi_Fuchs/Projekte/Energiestatistik_neu/R_Project/Oberflaechen_WP/"

# URL of the WFS service
wfs_all <- "https://maps.zh.ch/wfs/OGDZHWFS"

# Projection: EPSG:2056 (CH1903+ / LV95)
crs <- 2056

#current year
current_year <- as.integer(format(Sys.Date(), "%Y"))

# Parsing the URL
url <- httr2::url_parse(wfs_all)

# # Übersicht der vorhandenen Layers
# wfs_cl_all <- WFSClient$new(wfs_all, serviceVersion = "2.0.0")
# a <- wfs_cl_all$getFeatureTypes(pretty = TRUE)

kennwerte <- read.csv("https://raw.githubusercontent.com/awelZH/energy/refs/heads/main/data/input/kennwerte.csv", encoding="UTF-8", sep=";", header = T)
```

# Einlesen der Point Feature Class "Wasserrechte", Quelle: WFS-Geodienst

```{r}
#| label: get-wfs-wasserrechte
#| echo: false

# Oberflächen-WP Anlagen Punkte (bestehend) 
url$query <- list(
  service = "wfs",
  version = "2.0.0",
  request = "GetFeature",
  typename = "ms:ogd-0051_giszhpub_wb_wasserrechte_p",
  srsName = paste0("EPSG:", crs)
)
request_bestand <- httr2::url_build(url)

# Oberflächen-WP Anlagen Punkte (gelöscht)
url$query <- list(
  service = "wfs",
  version = "2.0.0",
  request = "GetFeature",
  typename = "ms:ogd-0051_giszhpub_wb_wasserrechte_geloescht_p",
  srsName = paste0("EPSG:", crs)
)
request_geloescht <- httr2::url_build(url)

# Oberflächen-WP Anlagen Linien (bestehend)
url$query <- list(
  service = "wfs",
  version = "2.0.0",
  request = "GetFeature",
  typename = "ms:ogd-0051_giszhpub_wb_wasserrechte_l",
  srsName = paste0("EPSG:", crs)
)
request_bestand_l <- httr2::url_build(url)

# Oberflächen-WP Anlagen Linien (gelöscht)
url$query <- list(
  service = "wfs",
  version = "2.0.0",
  request = "GetFeature",
  typename = "ms:ogd-0051_giszhpub_wb_wasserrechte_geloescht_l",
  srsName = paste0("EPSG:", crs)
)
request_geloescht_l <- httr2::url_build(url)


# Anlagen werden eingelesen, type = 1: Create a POINT geometry column.
wfs_bestand_input <- #bestehende Anlagen
  request_bestand %>% 
  sf::read_sf(type = 1) %>% 
  sf::st_transform(crs = sf::st_crs(crs))

wfs_geloescht_input <- #gelöschte Anlagen
  request_geloescht %>% 
  sf::read_sf(type = 1) %>% 
  sf::st_transform(crs = sf::st_crs(crs))

#Anlagen als Linien einlesen
wfs_bestand_input_l <- 
  request_bestand_l %>% 
  sf::read_sf() %>%  # Einlesen der Daten
  sf::st_transform(crs = sf::st_crs(crs))  # Transformation in das gewünschte CRS

wfs_geloescht_input_l <- 
  request_geloescht_l %>% 
  sf::read_sf() %>%  # Einlesen der Daten
  sf::st_transform(crs = sf::st_crs(crs))  # Transformation in das gewünschte CRS

#nur eine Zeile pro Wasserrechtsnummer
wfs_input_prov <- rbind(wfs_bestand_input, wfs_geloescht_input)
wfs_input_l_prov <- rbind(wfs_bestand_input_l, wfs_geloescht_input_l)

#sortieren und Dupikate (basierend auf WRNr) entfernen 
wfs_input <- wfs_input_prov %>%
  mutate(knotentyp_priority = case_when(
    grepl("^effektiver Entnahmeort", knotentyp_txt) ~ 1,  # Beginnt mit "effektiver Entnahmeort"
    grepl("^Entnahme", knotentyp_txt) ~ 2,  # Beginnt mit "Entnahme"
    grepl("Rückgabe", knotentyp_txt) ~ 3,  # Enthält "Rückgabe"
    TRUE ~ 4  # Alle anderen
  )) %>%
  arrange(wasserrechts_nr, knotentyp_priority) %>%  # Sortiere nach wasserrechts_nr und der neuen Priorität
  distinct(wasserrechts_nr, .keep_all = TRUE)  # Behalte nur die erste Zeile für jede wasserrechts_nr
```

# Einlesen der Polygon Feature Class "Gemeindegrenzen ZH", Quelle: WFS-Geodienst

```{r}
#| label: get-wfs-grenzen
#| echo: false

# Grenzen
url$query <- list(service = "wfs",
                  version = "2.0.0",
                  request = "GetFeature",
                  typename = "ms:ogd-0405_arv_basis_avzh_gemeinden_f",
                  srsName = paste0("EPSG:", crs)
)
request <- httr2::url_build(url)

# Gemeindegrenzen werden eingelesen, type = 6: Create a MULTIPOLYGON geometry column.
grenzen <- 
  request %>% 
  read_sf(type = 6) %>% 
  st_transform(crs = st_crs(crs))
```

# Verschneiden "Gemeindegrenzen ZH" und Linien-Datensätze

```{r}
#| label: intersect 

lines_with_name <- sf::st_join(
  wfs_input_l_prov,    # Der Liniendatensatz
  grenzen,             # Der Polygondatensatz mit dem Attribut "name"
  join = sf::st_intersects,  # Räumliche Beziehung: Schnittpunkte
  left = TRUE           # Beibehaltung aller Linien (auch ohne Treffer)
)
```

# Einlesen der bisherigen Anlagedaten und des neuen Jahresstands

```{r}
#| label: get-anlagedaten
#| echo: false

# bisherige Anlage-Daten einlesen
gewaesser_wp_alt_input <- read.csv(file_name_input, sep=";", header = T)

# Jahresstand einlesen
file_name_jahresstand <- paste0(file_path, "oberflaechen_wp_jahresstand_", current_year-1, ".xlsx")
gewaesser_wp_jahresstand_input <- read_excel(file_name_jahresstand)

gewaesser_wp_jahresstand <- gewaesser_wp_jahresstand_input %>%
  rename(Betrieb = colnames(gewaesser_wp_jahresstand_input)[6]) %>%  # Umbenennen der sechsten Spalte
  mutate(
    Betrieb = if_else(grepl("nicht", Betrieb, ignore.case = TRUE), "Nein", "Ja"),  # Bedingung anwenden
    Jahr = current_year-1
  ) %>%
  rename_with(~ ifelse(grepl("KEk", ., ignore.case = TRUE), "GebKEkWfix", .)) %>%
  rename_with(~ ifelse(grepl("WEk", ., ignore.case = TRUE), "GebWEkWfix", .))

#gewaesser_wp_input_prov <- rbind(gewaesser_wp_alt_input, gewaesser_wp_jahresstand)
```

# Join WFS-Daten und Gemeinden

```{r}
#| label: join 
#| echo: false

join_exact <- st_join(wfs_input, grenzen) %>%
  # Wenn du die Geometrie nicht mehr benötigst, kannst du sie entfernen
  st_drop_geometry()

#join_nearest <- wfs_input %>%
#  mutate(nearest_polygon_index = st_nearest_feature(geometry, grenzen)) %>%  # Finde den Index des nächsten Polygons
#  # Extrahiere bfsnr basierend auf diesem Index aus den grenzen
#  mutate(nearest_bfsnr = grenzen$bfsnr[nearest_polygon_index],
#         nearest_gemeinde = grenzen$name[nearest_polygon_index]) %>%
#  # Wenn du die Geometrie nicht mehr benötigst, kannst du sie entfernen
#  st_drop_geometry()

#join_wfs_gemeinden <- join_exact %>%
#  left_join(join_nearest %>% select(wasserrechts_nr, nearest_bfsnr, nearest_gemeinde), by = "wasserrechts_nr") %>%  # Join basierend auf WRNr
#  mutate(
#    bfsnr = if_else(is.na(bfsnr), nearest_bfsnr, bfsnr), # Ersetze NA in bfsnr mit nearest_bfsnr
#    gemeinde = if_else(is.na(name), nearest_gemeinde, name) # Ersetze NA in name mit nearest_gemeinde
#  ) %>%
#  select(-c(nearest_bfsnr, nearest_gemeinde))
```

# Join Geodaten und Energiedaten

```{r}
#| label: join
#| echo: false

# Geodaten und Energiedaten basierend auf Anlage-Identifikator zusammenführen
gis_gewaesser_wp_input_jahresstand <- left_join(gewaesser_wp_jahresstand, join_exact, by = c("WRNr" = "wasserrechts_nr"))
```

```{r}
#| label: join-master-grenzen
#| echo: false

anlagen_gewaesser_wp_prov <- gis_gewaesser_wp_input_jahresstand %>%
  select(bfsnr, name, WRNr, GebKEkWfix, GebWEkWfix, Jahr, Betrieb) %>%
  rename(gemeinde=name, gewaesser_wp_nr_anlage=WRNr, gewaesser_wp_waerme_kw_anlage=GebKEkWfix, gewaesser_wp_kaelte_kw_anlage=GebWEkWfix, jahr=Jahr, betrieb=Betrieb) %>%
  mutate(across(c(gewaesser_wp_waerme_kw_anlage, gewaesser_wp_kaelte_kw_anlage), as.numeric))

#ggf prüfen, ob noch Sterne vorhanden!!
#hier sind noch NA-Werte vorhanden

# Vorbereitender Schritt: Duplikate im zweiten Datensatz basierend auf "wasserrechts_nr" entfernen
lines_with_name_clean <- lines_with_name %>%
  filter(!is.na(wasserrechts_nr)) %>%  # NA-Werte in "wasserrechts_nr" ausschließen
  arrange(wasserrechts_nr, bfsnr, name) %>%  # Optional: nach sinnvollen Attributen sortieren
  group_by(wasserrechts_nr) %>%  # Gruppieren nach "wasserrechts_nr"
  slice(1) %>%  # Nur den ersten Eintrag jeder Gruppe behalten
  ungroup()

join_nearest <- wfs_input %>%
  mutate(nearest_polygon_index = st_nearest_feature(geometry, grenzen)) %>%  # Finde den Index des nächsten Polygons
  # Extrahiere bfsnr basierend auf diesem Index aus den grenzen
  mutate(nearest_bfsnr = grenzen$bfsnr[nearest_polygon_index],
         nearest_gemeinde = grenzen$name[nearest_polygon_index]) %>%
  # Wenn du die Geometrie nicht mehr benötigst, kannst du sie entfernen
  st_drop_geometry()


# Join der beiden Datensätze
anlagen_gewaesser_wp_filled <- anlagen_gewaesser_wp_prov %>%
  left_join(
    lines_with_name_clean %>% select(wasserrechts_nr, bfsnr, name),
    by = c("gewaesser_wp_nr_anlage" = "wasserrechts_nr")  # Join-Bedingung
  ) %>%
  # Füllen von NA-Werten in "bfsnr" und "gemeinde" mit den entsprechenden Werten aus dem Join
  mutate(
    bfsnr = coalesce(bfsnr.x, bfsnr.y),
    gemeinde = coalesce(gemeinde, name)
  ) %>%
  # Entfernen der überflüssigen Spalten
  select(-bfsnr.x, -bfsnr.y, -name, -geometry)  %>%
  left_join(
    join_nearest %>% select(wasserrechts_nr, nearest_bfsnr, nearest_gemeinde),
    by = c("gewaesser_wp_nr_anlage" = "wasserrechts_nr")  # Join-Bedingung
  ) %>%
  # Füllen von NA-Werten in "bfsnr" und "gemeinde" mit den entsprechenden Werten aus dem Join
  mutate(
    bfsnr = coalesce(bfsnr, nearest_bfsnr),
    gemeinde = coalesce(gemeinde, nearest_gemeinde)
  ) %>%
  # Entfernen der überflüssigen Spalten
  select(-nearest_bfsnr, -nearest_gemeinde) %>%
  left_join(
    gewaesser_wp_alt_input %>% select(gewaesser_wp_nr_anlage, bfsnr, gemeinde),  # Nur die benötigten Spalten aus datensatz2
    by = "gewaesser_wp_nr_anlage"  # Join-Bedingung
  ) %>%
  mutate(
    bfsnr = coalesce(bfsnr.x, bfsnr.y),
    gemeinde = coalesce(gemeinde.x, gemeinde.y)  # NA-Werte aus datensatz1 mit Werten aus datensatz2 füllen
  ) %>%
  select(-gemeinde.x, -gemeinde.y, -bfsnr.x, -bfsnr.y) %>%
  distinct() 


#### ACHTUNG!!! GEWISSE WR-NUMMERN SIND KEINER BFS-NR ZUGEWIESEN ####

# 1. WRNummern aus dem ersten Datensatz extrahieren, bei denen "gemeinde" NA ist
wrnr_with_na <- anlagen_gewaesser_wp_filled %>%
  filter(is.na(bfsnr)) %>%  # Zeilen mit NA in "gemeinde"
  pull(gewaesser_wp_nr_anlage)               # WRNummern extrahieren

# 2. Zeilen aus dem zweiten Datensatz filtern, die diese WRNummern enthalten
gewaesser_wp_jahresstand_input %>%
  filter(WRNr %in% wrnr_with_na)  # Zeilen mit den extrahierten WRNummern


gewaesser_wp_jahresstand_final <- anlagen_gewaesser_wp_filled %>%
  mutate(
    bfsnr = if_else(gewaesser_wp_nr_anlage == "b0224", 261, bfsnr),
    gemeinde = if_else(gewaesser_wp_nr_anlage == "b0224", "Zürich", gemeinde),
  ) %>%
  select(bfsnr, gemeinde, gewaesser_wp_nr_anlage, gewaesser_wp_waerme_kw_anlage, gewaesser_wp_kaelte_kw_anlage, jahr, betrieb)

anlagen_gewaesser_wp <- rbind(gewaesser_wp_alt_input, gewaesser_wp_jahresstand_final)



file_path <- "K:/BD-AWEL-Ef/Elektrizitätswirtschaft/Administration/Praktikum/Levi_Fuchs/Projekte/Energiestatistik_neu/R_Project/Oberflaechen_WP/"  # Hier Ihren gewünschten Pfad einfügen
file_name <- paste0(file_path, "anlagen_gewaesser_wp_", current_year-1, ".csv")

# write.csv(anlagen_gewaesser_wp, file = file_name, row.names = F)
```

# Finalisierung

```{r}
#| label: wrangle-data
#| echo: true

# Define the time range
erstes_jahr <- min(anlagen_gewaesser_wp$jahr)
aktuelles_jahr <- max(anlagen_gewaesser_wp$jahr)
anlagen_gewaesser_wp <- anlagen_gewaesser_wp %>% #d0197 und e0170 sind im GIS_Browser (WFS-Daten) nicht vorhanden
  mutate(gemeinde = if_else(gewaesser_wp_nr_anlage == "d0197", "Horgen", gemeinde),
         bfsnr = if_else(gewaesser_wp_nr_anlage == "d0197", 295, bfsnr),
         gemeinde = if_else(gewaesser_wp_nr_anlage == "e0170", "Männedorf", gemeinde),
         bfsnr = if_else(gewaesser_wp_nr_anlage == "e0170", 155, bfsnr))

# Create a sequence of years from first to the current year
years <- tibble(jahr = seq(erstes_jahr, aktuelles_jahr))

# Extract unique combinations of bfsnr and name values
bfsnr_name_values <- anlagen_gewaesser_wp %>% select(bfsnr, gemeinde) %>% distinct()

# Create a complete time series for each combination of bfsnr and name
complete_time_series <- bfsnr_name_values %>%
  crossing(jahr = seq(erstes_jahr, aktuelles_jahr))

gewaesser_wp_final <- tibble(anlagen_gewaesser_wp) %>% 
  group_by(bfsnr, gemeinde, jahr) %>% 
  summarise(
    gewaesser_wp_anzahl_gem = n(),
    gewaesser_wp_waerme_kw_gem = sum(gewaesser_wp_waerme_kw_anlage, na.rm = TRUE),
    gewaesser_wp_kaelte_kw_gem = sum(gewaesser_wp_kaelte_kw_anlage, na.rm = TRUE),
    gewaesser_wp_anzahl_gem = n(),
    .groups = 'drop'
  ) %>%
  right_join(complete_time_series, by = c("bfsnr", "gemeinde", "jahr")) %>%
  arrange(bfsnr, gemeinde, jahr) %>%
  group_by(bfsnr, gemeinde) %>%
  mutate(
    gewaesser_wp_anzahl_gem = coalesce(gewaesser_wp_anzahl_gem, 0),
    gewaesser_wp_waerme_kw_gem = coalesce(gewaesser_wp_waerme_kw_gem, 0),
    gewaesser_wp_kaelte_kw_gem = coalesce(gewaesser_wp_kaelte_kw_gem, 0),
    gewaesser_wp_anzahl_gem = coalesce(gewaesser_wp_anzahl_gem, 0),
    gewaesser_wp_waerme_mwh_gem = gewaesser_wp_waerme_kw_gem*kennwerte$betriebszeit_wp/1000,
    gewaesser_wp_kaelte_mwh_gem = gewaesser_wp_kaelte_kw_gem*kennwerte$betriebszeit_wp/1000
  ) %>%
  ungroup()


write.csv(gewaesser_wp_final, file.path(file.path(dirname(dirname(rstudioapi::getActiveDocumentContext()$path)), "data", "output"), "gewaesser_wp.csv"), row.names = FALSE)
```
